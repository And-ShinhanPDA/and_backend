package com.example.alert_module.notification.service;

import com.example.alert_module.notification.dto.PushMessage;
import com.google.firebase.messaging.*;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

@Slf4j
@Service
public class NotificationService {

    public void sendAll(List<String> tokens, PushMessage message) {
        if (tokens == null || tokens.isEmpty()) {
            log.warn("‚ö†Ô∏è FCM ÌÜ†ÌÅ∞ ÏóÜÏùå, Ï†ÑÏÜ° Ï§ëÎã®");
            return;
        }

        List<String> targets = new ArrayList<>(tokens);
        int maxAttempts = 3;
        int attempt = 1;

        while (attempt <= maxAttempts && !targets.isEmpty()) {
            MulticastMessage multicastMessage = MulticastMessage.builder()
                    .addAllTokens(targets)
                    .setNotification(Notification.builder()
                            .setTitle(message.title())
                            .setBody(message.body())
                            .build())
                    .putData("title", message.title())
                    .putData("body", message.body())
                    .build();

            try {
                BatchResponse response = FirebaseMessaging.getInstance().sendEachForMulticast(multicastMessage);
                int success = response.getSuccessCount();
                int failure = response.getFailureCount();
                log.info("üìä [FCM Ï†ÑÏÜ° Í≤∞Í≥º - ÏãúÎèÑ {}ÌöåÏ∞®] Ï†ÑÏ≤¥={}, ÏÑ±Í≥µ={}, Ïã§Ìå®={}", attempt, targets.size(), success, failure);

                List<String> retryTokens = new ArrayList<>();

                List<SendResponse> responses = response.getResponses();
                for (int i = 0; i < responses.size(); i++) {
                    SendResponse sendResponse = responses.get(i);
                    String token = targets.get(i);

                    if (!sendResponse.isSuccessful()) {
                        FirebaseMessagingException ex = (FirebaseMessagingException) sendResponse.getException();
                        MessagingErrorCode code = ex.getMessagingErrorCode();

                        // üîÅ ÏÑúÎ≤Ñ Ïò§Î•ò or ÎÑ§Ìä∏ÏõåÌÅ¨ Î∂àÏïàÏ†ï ‚Üí Ïû¨ÏãúÎèÑ ÎåÄÏÉÅ
                        if (code == MessagingErrorCode.INTERNAL || code == MessagingErrorCode.UNAVAILABLE) {
                            log.warn("üîÅ [FCM Ïû¨ÏãúÎèÑ ÎåÄÏÉÅ] token={}, error={}", token, code);
                            retryTokens.add(token);
                        }

                        // ‚ö†Ô∏è Ïù∏Ï¶ù/ÏÑ§Ï†ï Ïò§Î•ò ‚Üí ÏÑúÎ≤Ñ Ï†êÍ≤Ä ÌïÑÏöî
                        else if (code == MessagingErrorCode.THIRD_PARTY_AUTH_ERROR || code == MessagingErrorCode.SENDER_ID_MISMATCH) {
                            log.error("‚ö†Ô∏è [FCM Ïù∏Ï¶ù/ÏÑúÎ≤Ñ ÏÑ§Ï†ï Î¨∏Ï†ú] token={}, error={}", token, code);
                        }
                    }
                }

                // ‚úÖ Î™®Îëê ÏÑ±Í≥µÌñàÏúºÎ©¥ Ï¢ÖÎ£å
                if (retryTokens.isEmpty()) {
                    log.info("‚úÖ [FCM Ï†ÑÏÜ° ÏôÑÎ£å] ÏãúÎèÑ {}ÌöåÏ∞®Ïóê Ï†ÑÏ≤¥ ÏÑ±Í≥µ", attempt);
                    return;
                }

                // üîÅ Ïã§Ìå®Ìïú ÌÜ†ÌÅ∞Îßå Îã§Ïãú ÏãúÎèÑ
                targets = retryTokens;
                attempt++;

            } catch (FirebaseMessagingException e) {
                log.error("‚ùå [FCM Ï†ÑÏÜ° Ï§ë ÏòàÏô∏] attempt={}, errorCode={}, message={}", attempt, e.getMessagingErrorCode(), e.getMessage());
                return;
            }
        }

        if (!targets.isEmpty()) {
            log.error("‚ùå [FCM Ï†ÑÏÜ° ÏµúÏ¢Ö Ïã§Ìå®] Ïã§Ìå® ÌÜ†ÌÅ∞ Í∞úÏàò={}", targets.size());
        }
    }


    public void send(String token, PushMessage message) {
        if (token == null || token.isBlank()) {
            log.warn("‚ö†Ô∏è Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ FCM ÌÜ†ÌÅ∞: {}", token);
            return;
        }

        Message fcmMessage = Message.builder()
                .setToken(token)
                .setNotification(Notification.builder()
                        .setTitle(message.title())
                        .setBody(message.body())
                        .build())
                .putData("title", message.title())
                .putData("body", message.body())
                .build();

        try {
            String response = FirebaseMessaging.getInstance().send(fcmMessage);
            log.info("‚úÖ [Îã®Ïùº FCM Ï†ÑÏÜ° ÏÑ±Í≥µ] {}", response);
        } catch (FirebaseMessagingException e) {
            log.error("‚ùå [Îã®Ïùº FCM Ï†ÑÏÜ° Ïã§Ìå®] code={}, msg={}",
                    e.getErrorCode(), e.getMessage());
        }
    }
}
